; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=s390x-linux-gnu -mcpu=z15 -verify-machineinstrs -O3 \
; RUN:   | FileCheck %s

; Test reassociation of fp add, subtract and multiply.

define i64 @fun0_add(ptr %x) {
; CHECK-LABEL: fun0_add:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ld %f0, 0(%r2)
; CHECK-NEXT:    adb %f0, 8(%r2)
; CHECK-NEXT:    ld %f1, 24(%r2)
; CHECK-NEXT:    adb %f1, 16(%r2)
; CHECK-NEXT:    adbr %f0, %f1
; CHECK-NEXT:    ld %f1, 40(%r2)
; CHECK-NEXT:    adb %f1, 32(%r2)
; CHECK-NEXT:    adb %f1, 48(%r2)
; CHECK-NEXT:    adbr %f0, %f1
; CHECK-NEXT:    adb %f0, 56(%r2)
; CHECK-NEXT:    br %r14
entry:
  %0 = load i64, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds i64, ptr %x, i64 2
  %1 = load i64, ptr %arrayidx1, align 8
  %add = add i64 %1, %0
  %arrayidx2 = getelementptr inbounds i64, ptr %x, i64 4
  %2 = load i64, ptr %arrayidx2, align 8
  %add3 = add i64 %add, %2
  %arrayidx4 = getelementptr inbounds i64, ptr %x, i64 6
  %3 = load i64, ptr %arrayidx4, align 8
  %add5 = add i64 %add3, %3
  %arrayidx6 = getelementptr inbounds i64, ptr %x, i64 8
  %4 = load i64, ptr %arrayidx6, align 8
  %add7 = add i64 %add5, %4
  %arrayidx8 = getelementptr inbounds i64, ptr %x, i64 10
  %5 = load i64, ptr %arrayidx8, align 8
  %add9 = add i64 %add7, %5
  %arrayidx10 = getelementptr inbounds i64, ptr %x, i64 12
  %6 = load i64, ptr %arrayidx10, align 8
  %add11 = add i64 %add9, %6
  %arrayidx12 = getelementptr inbounds i64, ptr %x, i64 14
  %7 = load i64, ptr %arrayidx12, align 8
  %add13 = add i64 %add11, %7
  ret i64 %add13
}

define i32 @fun1_add(ptr %x) {
; CHECK-LABEL: fun1_add:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lde %f0, 0(%r2)
; CHECK-NEXT:    aeb %f0, 4(%r2)
; CHECK-NEXT:    lde %f1, 12(%r2)
; CHECK-NEXT:    aeb %f1, 8(%r2)
; CHECK-NEXT:    aebr %f0, %f1
; CHECK-NEXT:    lde %f1, 20(%r2)
; CHECK-NEXT:    aeb %f1, 16(%r2)
; CHECK-NEXT:    aeb %f1, 24(%r2)
; CHECK-NEXT:    aebr %f0, %f1
; CHECK-NEXT:    aeb %f0, 28(%r2)
; CHECK-NEXT:    br %r14
entry:
  %0 = load i32, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds i32, ptr %x, i64 1
  %1 = load i32, ptr %arrayidx1, align 8
  %add = add i32 %1, %0
  %arrayidx2 = getelementptr inbounds i32, ptr %x, i64 2
  %2 = load i32, ptr %arrayidx2, align 8
  %add3 = add i32 %add, %2
  %arrayidx4 = getelementptr inbounds i32, ptr %x, i64 3
  %3 = load i32, ptr %arrayidx4, align 8
  %add5 = add i32 %add3, %3
  %arrayidx6 = getelementptr inbounds i32, ptr %x, i64 4
  %4 = load i32, ptr %arrayidx6, align 8
  %add7 = add i32 %add5, %4
  %arrayidx8 = getelementptr inbounds i32, ptr %x, i64 5
  %5 = load i32, ptr %arrayidx8, align 8
  %add9 = add i32 %add7, %5
  %arrayidx10 = getelementptr inbounds i32, ptr %x, i64 6
  %6 = load i32, ptr %arrayidx10, align 8
  %add11 = add i32 %add9, %6
  %arrayidx12 = getelementptr inbounds i32, ptr %x, i64 7
  %7 = load i32, ptr %arrayidx12, align 8
  %add13 = add i32 %add11, %7
  ret i32 %add13
}

define i128 @fun2_add(ptr %x) {
; CHECK-LABEL: fun2_add:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vl %v0, 0(%r3), 3
; CHECK-NEXT:    vl %v1, 16(%r3), 3
; CHECK-NEXT:    wfaxb %v0, %v1, %v0
; CHECK-NEXT:    vl %v1, 32(%r3), 3
; CHECK-NEXT:    vl %v2, 48(%r3), 3
; CHECK-NEXT:    wfaxb %v1, %v1, %v2
; CHECK-NEXT:    wfaxb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 64(%r3), 3
; CHECK-NEXT:    vl %v2, 80(%r3), 3
; CHECK-NEXT:    wfaxb %v1, %v1, %v2
; CHECK-NEXT:    vl %v2, 96(%r3), 3
; CHECK-NEXT:    wfaxb %v1, %v1, %v2
; CHECK-NEXT:    wfaxb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 112(%r3), 3
; CHECK-NEXT:    wfaxb %v0, %v0, %v1
; CHECK-NEXT:    vst %v0, 0(%r2), 3
; CHECK-NEXT:    br %r14
entry:
  %0 = load i128, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds i128, ptr %x, i128 2
  %1 = load i128, ptr %arrayidx1, align 8
  %add = add i128 %1, %0
  %arrayidx2 = getelementptr inbounds i128, ptr %x, i128 4
  %2 = load i128, ptr %arrayidx2, align 8
  %add3 = add i128 %add, %2
  %arrayidx4 = getelementptr inbounds i128, ptr %x, i128 6
  %3 = load i128, ptr %arrayidx4, align 8
  %add5 = add i128 %add3, %3
  %arrayidx6 = getelementptr inbounds i128, ptr %x, i128 8
  %4 = load i128, ptr %arrayidx6, align 8
  %add7 = add i128 %add5, %4
  %arrayidx8 = getelementptr inbounds i128, ptr %x, i128 10
  %5 = load i128, ptr %arrayidx8, align 8
  %add9 = add i128 %add7, %5
  %arrayidx10 = getelementptr inbounds i128, ptr %x, i128 12
  %6 = load i128, ptr %arrayidx10, align 8
  %add11 = add i128 %add9, %6
  %arrayidx12 = getelementptr inbounds i128, ptr %x, i128 14
  %7 = load i128, ptr %arrayidx12, align 8
  %add13 = add i128 %add11, %7
  ret i128 %add13
}

define <2 x i64> @fun3_add(ptr %x) {
; CHECK-LABEL: fun3_add:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vl %v0, 0(%r2), 3
; CHECK-NEXT:    vl %v1, 16(%r2), 3
; CHECK-NEXT:    vfadb %v0, %v1, %v0
; CHECK-NEXT:    vl %v1, 32(%r2), 3
; CHECK-NEXT:    vl %v2, 48(%r2), 3
; CHECK-NEXT:    vfadb %v1, %v1, %v2
; CHECK-NEXT:    vfadb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 64(%r2), 3
; CHECK-NEXT:    vl %v2, 80(%r2), 3
; CHECK-NEXT:    vfadb %v1, %v1, %v2
; CHECK-NEXT:    vl %v2, 96(%r2), 3
; CHECK-NEXT:    vfadb %v1, %v1, %v2
; CHECK-NEXT:    vfadb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 112(%r2), 3
; CHECK-NEXT:    vfadb %v24, %v0, %v1
; CHECK-NEXT:    br %r14
entry:
  %0 = load <2 x i64>, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds <2 x i64>, ptr %x, i64 4
  %1 = load <2 x i64>, ptr %arrayidx1, align 8
  %add = add <2 x i64> %1, %0
  %arrayidx2 = getelementptr inbounds <2 x i64>, ptr %x, i64 8
  %2 = load <2 x i64>, ptr %arrayidx2, align 8
  %add3 = add <2 x i64> %add, %2
  %arrayidx4 = getelementptr inbounds <2 x i64>, ptr %x, i64 12
  %3 = load <2 x i64>, ptr %arrayidx4, align 8
  %add5 = add <2 x i64> %add3, %3
  %arrayidx6 = getelementptr inbounds <2 x i64>, ptr %x, i64 16
  %4 = load <2 x i64>, ptr %arrayidx6, align 8
  %add7 = add <2 x i64> %add5, %4
  %arrayidx8 = getelementptr inbounds <2 x i64>, ptr %x, i64 20
  %5 = load <2 x i64>, ptr %arrayidx8, align 8
  %add9 = add <2 x i64> %add7, %5
  %arrayidx10 = getelementptr inbounds <2 x i64>, ptr %x, i64 24
  %6 = load <2 x i64>, ptr %arrayidx10, align 8
  %add11 = add <2 x i64> %add9, %6
  %arrayidx12 = getelementptr inbounds <2 x i64>, ptr %x, i64 28
  %7 = load <2 x i64>, ptr %arrayidx12, align 8
  %add13 = add <2 x i64> %add11, %7
  ret <2 x i64> %add13
}

define <4 x i32> @fun4_add(ptr %x) {
; CHECK-LABEL: fun4_add:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vl %v0, 0(%r2), 3
; CHECK-NEXT:    vl %v1, 16(%r2), 3
; CHECK-NEXT:    vfasb %v0, %v1, %v0
; CHECK-NEXT:    vl %v1, 32(%r2), 3
; CHECK-NEXT:    vl %v2, 48(%r2), 3
; CHECK-NEXT:    vfasb %v1, %v1, %v2
; CHECK-NEXT:    vfasb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 64(%r2), 3
; CHECK-NEXT:    vl %v2, 80(%r2), 3
; CHECK-NEXT:    vfasb %v1, %v1, %v2
; CHECK-NEXT:    vl %v2, 96(%r2), 3
; CHECK-NEXT:    vfasb %v1, %v1, %v2
; CHECK-NEXT:    vfasb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 112(%r2), 3
; CHECK-NEXT:    vfasb %v24, %v0, %v1
; CHECK-NEXT:    br %r14
entry:
  %0 = load <4 x i32>, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds <4 x i32>, ptr %x, i64 4
  %1 = load <4 x i32>, ptr %arrayidx1, align 8
  %add = add <4 x i32> %1, %0
  %arrayidx2 = getelementptr inbounds <4 x i32>, ptr %x, i64 8
  %2 = load <4 x i32>, ptr %arrayidx2, align 8
  %add3 = add <4 x i32> %add, %2
  %arrayidx4 = getelementptr inbounds <4 x i32>, ptr %x, i64 12
  %3 = load <4 x i32>, ptr %arrayidx4, align 8
  %add5 = add <4 x i32> %add3, %3
  %arrayidx6 = getelementptr inbounds <4 x i32>, ptr %x, i64 16
  %4 = load <4 x i32>, ptr %arrayidx6, align 8
  %add7 = add <4 x i32> %add5, %4
  %arrayidx8 = getelementptr inbounds <4 x i32>, ptr %x, i64 20
  %5 = load <4 x i32>, ptr %arrayidx8, align 8
  %add9 = add <4 x i32> %add7, %5
  %arrayidx10 = getelementptr inbounds <4 x i32>, ptr %x, i64 24
  %6 = load <4 x i32>, ptr %arrayidx10, align 8
  %add11 = add <4 x i32> %add9, %6
  %arrayidx12 = getelementptr inbounds <4 x i32>, ptr %x, i64 28
  %7 = load <4 x i32>, ptr %arrayidx12, align 8
  %add13 = add <4 x i32> %add11, %7
  ret <4 x i32> %add13
}

define i64 @fun5_sub(ptr %x) {
; CHECK-LABEL: fun5_sub:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ld %f0, 0(%r2)
; CHECK-NEXT:    sdb %f0, 8(%r2)
; CHECK-NEXT:    ld %f1, 24(%r2)
; CHECK-NEXT:    adb %f1, 16(%r2)
; CHECK-NEXT:    sdbr %f0, %f1
; CHECK-NEXT:    ld %f1, 40(%r2)
; CHECK-NEXT:    adb %f1, 32(%r2)
; CHECK-NEXT:    adb %f1, 48(%r2)
; CHECK-NEXT:    sdbr %f0, %f1
; CHECK-NEXT:    sdb %f0, 56(%r2)
; CHECK-NEXT:    br %r14
entry:
  %0 = load i64, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds i64, ptr %x, i64 2
  %1 = load i64, ptr %arrayidx1, align 8
  %sub = sub i64 %0, %1
  %arrayidx2 = getelementptr inbounds i64, ptr %x, i64 4
  %2 = load i64, ptr %arrayidx2, align 8
  %sub3 = sub i64 %sub, %2
  %arrayidx4 = getelementptr inbounds i64, ptr %x, i64 6
  %3 = load i64, ptr %arrayidx4, align 8
  %sub5 = sub i64 %sub3, %3
  %arrayidx6 = getelementptr inbounds i64, ptr %x, i64 8
  %4 = load i64, ptr %arrayidx6, align 8
  %sub7 = sub i64 %sub5, %4
  %arrayidx8 = getelementptr inbounds i64, ptr %x, i64 10
  %5 = load i64, ptr %arrayidx8, align 8
  %sub9 = sub i64 %sub7, %5
  %arrayidx10 = getelementptr inbounds i64, ptr %x, i64 12
  %6 = load i64, ptr %arrayidx10, align 8
  %sub11 = sub i64 %sub9, %6
  %arrayidx12 = getelementptr inbounds i64, ptr %x, i64 14
  %7 = load i64, ptr %arrayidx12, align 8
  %sub13 = sub i64 %sub11, %7
  ret i64 %sub13
}

define i32 @fun6_sub(ptr %x) {
; CHECK-LABEL: fun6_sub:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lde %f0, 0(%r2)
; CHECK-NEXT:    seb %f0, 4(%r2)
; CHECK-NEXT:    lde %f1, 12(%r2)
; CHECK-NEXT:    aeb %f1, 8(%r2)
; CHECK-NEXT:    sebr %f0, %f1
; CHECK-NEXT:    lde %f1, 20(%r2)
; CHECK-NEXT:    aeb %f1, 16(%r2)
; CHECK-NEXT:    aeb %f1, 24(%r2)
; CHECK-NEXT:    sebr %f0, %f1
; CHECK-NEXT:    seb %f0, 28(%r2)
; CHECK-NEXT:    br %r14
entry:
  %0 = load i32, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds i32, ptr %x, i64 1
  %1 = load i32, ptr %arrayidx1, align 8
  %sub = sub i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, ptr %x, i64 2
  %2 = load i32, ptr %arrayidx2, align 8
  %sub3 = sub i32 %sub, %2
  %arrayidx4 = getelementptr inbounds i32, ptr %x, i64 3
  %3 = load i32, ptr %arrayidx4, align 8
  %sub5 = sub i32 %sub3, %3
  %arrayidx6 = getelementptr inbounds i32, ptr %x, i64 4
  %4 = load i32, ptr %arrayidx6, align 8
  %sub7 = sub i32 %sub5, %4
  %arrayidx8 = getelementptr inbounds i32, ptr %x, i64 5
  %5 = load i32, ptr %arrayidx8, align 8
  %sub9 = sub i32 %sub7, %5
  %arrayidx10 = getelementptr inbounds i32, ptr %x, i64 6
  %6 = load i32, ptr %arrayidx10, align 8
  %sub11 = sub i32 %sub9, %6
  %arrayidx12 = getelementptr inbounds i32, ptr %x, i64 7
  %7 = load i32, ptr %arrayidx12, align 8
  %sub13 = sub i32 %sub11, %7
  ret i32 %sub13
}

define i128 @fun7_sub(ptr %x) {
; CHECK-LABEL: fun7_sub:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vl %v0, 0(%r3), 3
; CHECK-NEXT:    vl %v1, 16(%r3), 3
; CHECK-NEXT:    wfsxb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 32(%r3), 3
; CHECK-NEXT:    vl %v2, 48(%r3), 3
; CHECK-NEXT:    wfaxb %v1, %v1, %v2
; CHECK-NEXT:    wfsxb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 64(%r3), 3
; CHECK-NEXT:    vl %v2, 80(%r3), 3
; CHECK-NEXT:    wfaxb %v1, %v1, %v2
; CHECK-NEXT:    vl %v2, 96(%r3), 3
; CHECK-NEXT:    wfaxb %v1, %v1, %v2
; CHECK-NEXT:    wfsxb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 112(%r3), 3
; CHECK-NEXT:    wfsxb %v0, %v0, %v1
; CHECK-NEXT:    vst %v0, 0(%r2), 3
; CHECK-NEXT:    br %r14
entry:
  %0 = load i128, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds i128, ptr %x, i64 4
  %1 = load i128, ptr %arrayidx1, align 8
  %sub = sub i128 %0, %1
  %arrayidx2 = getelementptr inbounds i128, ptr %x, i64 8
  %2 = load i128, ptr %arrayidx2, align 8
  %sub3 = sub i128 %sub, %2
  %arrayidx4 = getelementptr inbounds i128, ptr %x, i64 12
  %3 = load i128, ptr %arrayidx4, align 8
  %sub5 = sub i128 %sub3, %3
  %arrayidx6 = getelementptr inbounds i128, ptr %x, i64 16
  %4 = load i128, ptr %arrayidx6, align 8
  %sub7 = sub i128 %sub5, %4
  %arrayidx8 = getelementptr inbounds i128, ptr %x, i64 20
  %5 = load i128, ptr %arrayidx8, align 8
  %sub9 = sub i128 %sub7, %5
  %arrayidx10 = getelementptr inbounds i128, ptr %x, i64 24
  %6 = load i128, ptr %arrayidx10, align 8
  %sub11 = sub i128 %sub9, %6
  %arrayidx12 = getelementptr inbounds i128, ptr %x, i64 28
  %7 = load i128, ptr %arrayidx12, align 8
  %sub13 = sub i128 %sub11, %7
  ret i128 %sub13
}

define <2 x i64> @fun8_sub(ptr %x) {
; CHECK-LABEL: fun8_sub:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vl %v0, 0(%r2), 3
; CHECK-NEXT:    vl %v1, 16(%r2), 3
; CHECK-NEXT:    vfsdb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 32(%r2), 3
; CHECK-NEXT:    vl %v2, 48(%r2), 3
; CHECK-NEXT:    vfadb %v1, %v1, %v2
; CHECK-NEXT:    vfsdb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 64(%r2), 3
; CHECK-NEXT:    vl %v2, 80(%r2), 3
; CHECK-NEXT:    vfadb %v1, %v1, %v2
; CHECK-NEXT:    vl %v2, 96(%r2), 3
; CHECK-NEXT:    vfadb %v1, %v1, %v2
; CHECK-NEXT:    vfsdb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 112(%r2), 3
; CHECK-NEXT:    vfsdb %v24, %v0, %v1
; CHECK-NEXT:    br %r14
entry:
  %0 = load <2 x i64>, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds <2 x i64>, ptr %x, i64 4
  %1 = load <2 x i64>, ptr %arrayidx1, align 8
  %sub = sub <2 x i64> %0, %1
  %arrayidx2 = getelementptr inbounds <2 x i64>, ptr %x, i64 8
  %2 = load <2 x i64>, ptr %arrayidx2, align 8
  %sub3 = sub <2 x i64> %sub, %2
  %arrayidx4 = getelementptr inbounds <2 x i64>, ptr %x, i64 12
  %3 = load <2 x i64>, ptr %arrayidx4, align 8
  %sub5 = sub <2 x i64> %sub3, %3
  %arrayidx6 = getelementptr inbounds <2 x i64>, ptr %x, i64 16
  %4 = load <2 x i64>, ptr %arrayidx6, align 8
  %sub7 = sub <2 x i64> %sub5, %4
  %arrayidx8 = getelementptr inbounds <2 x i64>, ptr %x, i64 20
  %5 = load <2 x i64>, ptr %arrayidx8, align 8
  %sub9 = sub <2 x i64> %sub7, %5
  %arrayidx10 = getelementptr inbounds <2 x i64>, ptr %x, i64 24
  %6 = load <2 x i64>, ptr %arrayidx10, align 8
  %sub11 = sub <2 x i64> %sub9, %6
  %arrayidx12 = getelementptr inbounds <2 x i64>, ptr %x, i64 28
  %7 = load <2 x i64>, ptr %arrayidx12, align 8
  %sub13 = sub <2 x i64> %sub11, %7
  ret <2 x i64> %sub13
}

define <4 x i32> @fun9_sub(ptr %x) {
; CHECK-LABEL: fun9_sub:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vl %v0, 0(%r2), 3
; CHECK-NEXT:    vl %v1, 16(%r2), 3
; CHECK-NEXT:    vfssb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 32(%r2), 3
; CHECK-NEXT:    vl %v2, 48(%r2), 3
; CHECK-NEXT:    vfasb %v1, %v1, %v2
; CHECK-NEXT:    vfssb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 64(%r2), 3
; CHECK-NEXT:    vl %v2, 80(%r2), 3
; CHECK-NEXT:    vfasb %v1, %v1, %v2
; CHECK-NEXT:    vl %v2, 96(%r2), 3
; CHECK-NEXT:    vfasb %v1, %v1, %v2
; CHECK-NEXT:    vfssb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 112(%r2), 3
; CHECK-NEXT:    vfssb %v24, %v0, %v1
; CHECK-NEXT:    br %r14
entry:
  %0 = load <4 x i32>, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds <4 x i32>, ptr %x, i64 4
  %1 = load <4 x i32>, ptr %arrayidx1, align 8
  %sub = sub <4 x i32> %0, %1
  %arrayidx2 = getelementptr inbounds <4 x i32>, ptr %x, i64 8
  %2 = load <4 x i32>, ptr %arrayidx2, align 8
  %sub3 = sub <4 x i32> %sub, %2
  %arrayidx4 = getelementptr inbounds <4 x i32>, ptr %x, i64 12
  %3 = load <4 x i32>, ptr %arrayidx4, align 8
  %sub5 = sub <4 x i32> %sub3, %3
  %arrayidx6 = getelementptr inbounds <4 x i32>, ptr %x, i64 16
  %4 = load <4 x i32>, ptr %arrayidx6, align 8
  %sub7 = sub <4 x i32> %sub5, %4
  %arrayidx8 = getelementptr inbounds <4 x i32>, ptr %x, i64 20
  %5 = load <4 x i32>, ptr %arrayidx8, align 8
  %sub9 = sub <4 x i32> %sub7, %5
  %arrayidx10 = getelementptr inbounds <4 x i32>, ptr %x, i64 24
  %6 = load <4 x i32>, ptr %arrayidx10, align 8
  %sub11 = sub <4 x i32> %sub9, %6
  %arrayidx12 = getelementptr inbounds <4 x i32>, ptr %x, i64 28
  %7 = load <4 x i32>, ptr %arrayidx12, align 8
  %sub13 = sub <4 x i32> %sub11, %7
  ret <4 x i32> %sub13
}

define i64 @fun10_mul(ptr %x) {
; CHECK-LABEL: fun10_mul:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ld %f0, 8(%r2)
; CHECK-NEXT:    mdb %f0, 0(%r2)
; CHECK-NEXT:    ld %f1, 24(%r2)
; CHECK-NEXT:    mdb %f1, 16(%r2)
; CHECK-NEXT:    mdbr %f0, %f1
; CHECK-NEXT:    ld %f1, 40(%r2)
; CHECK-NEXT:    mdb %f1, 32(%r2)
; CHECK-NEXT:    mdb %f1, 48(%r2)
; CHECK-NEXT:    mdbr %f0, %f1
; CHECK-NEXT:    mdb %f0, 56(%r2)
; CHECK-NEXT:    br %r14
entry:
  %0 = load i64, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds i64, ptr %x, i64 2
  %1 = load i64, ptr %arrayidx1, align 8
  %mul = mul i64 %0, %1
  %arrayidx2 = getelementptr inbounds i64, ptr %x, i64 4
  %2 = load i64, ptr %arrayidx2, align 8
  %mul3 = mul i64 %mul, %2
  %arrayidx4 = getelementptr inbounds i64, ptr %x, i64 6
  %3 = load i64, ptr %arrayidx4, align 8
  %mul5 = mul i64 %mul3, %3
  %arrayidx6 = getelementptr inbounds i64, ptr %x, i64 8
  %4 = load i64, ptr %arrayidx6, align 8
  %mul7 = mul i64 %mul5, %4
  %arrayidx8 = getelementptr inbounds i64, ptr %x, i64 10
  %5 = load i64, ptr %arrayidx8, align 8
  %mul9 = mul i64 %mul7, %5
  %arrayidx10 = getelementptr inbounds i64, ptr %x, i64 12
  %6 = load i64, ptr %arrayidx10, align 8
  %mul11 = mul i64 %mul9, %6
  %arrayidx12 = getelementptr inbounds i64, ptr %x, i64 14
  %7 = load i64, ptr %arrayidx12, align 8
  %mul13 = mul i64 %mul11, %7
  ret i64 %mul13
}

define i32 @fun11_mul(ptr %x) {
; CHECK-LABEL: fun11_mul:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lde %f0, 4(%r2)
; CHECK-NEXT:    meeb %f0, 0(%r2)
; CHECK-NEXT:    lde %f1, 12(%r2)
; CHECK-NEXT:    meeb %f1, 8(%r2)
; CHECK-NEXT:    meebr %f0, %f1
; CHECK-NEXT:    lde %f1, 20(%r2)
; CHECK-NEXT:    meeb %f1, 16(%r2)
; CHECK-NEXT:    meeb %f1, 24(%r2)
; CHECK-NEXT:    meebr %f0, %f1
; CHECK-NEXT:    meeb %f0, 28(%r2)
; CHECK-NEXT:    br %r14
entry:
  %0 = load i32, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds i32, ptr %x, i64 1
  %1 = load i32, ptr %arrayidx1, align 8
  %mul = mul i32 %0, %1
  %arrayidx2 = getelementptr inbounds i32, ptr %x, i64 2
  %2 = load i32, ptr %arrayidx2, align 8
  %mul3 = mul i32 %mul, %2
  %arrayidx4 = getelementptr inbounds i32, ptr %x, i64 3
  %3 = load i32, ptr %arrayidx4, align 8
  %mul5 = mul i32 %mul3, %3
  %arrayidx6 = getelementptr inbounds i32, ptr %x, i64 4
  %4 = load i32, ptr %arrayidx6, align 8
  %mul7 = mul i32 %mul5, %4
  %arrayidx8 = getelementptr inbounds i32, ptr %x, i64 5
  %5 = load i32, ptr %arrayidx8, align 8
  %mul9 = mul i32 %mul7, %5
  %arrayidx10 = getelementptr inbounds i32, ptr %x, i64 6
  %6 = load i32, ptr %arrayidx10, align 8
  %mul11 = mul i32 %mul9, %6
  %arrayidx12 = getelementptr inbounds i32, ptr %x, i64 7
  %7 = load i32, ptr %arrayidx12, align 8
  %mul13 = mul i32 %mul11, %7
  ret i32 %mul13
}

define i128 @fun12_mul(ptr %x) {
; CHECK-LABEL: fun12_mul:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vl %v0, 0(%r3), 3
; CHECK-NEXT:    vl %v1, 16(%r3), 3
; CHECK-NEXT:    wfmxb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 32(%r3), 3
; CHECK-NEXT:    vl %v2, 48(%r3), 3
; CHECK-NEXT:    wfmxb %v1, %v1, %v2
; CHECK-NEXT:    wfmxb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 64(%r3), 3
; CHECK-NEXT:    vl %v2, 80(%r3), 3
; CHECK-NEXT:    wfmxb %v1, %v1, %v2
; CHECK-NEXT:    vl %v2, 96(%r3), 3
; CHECK-NEXT:    wfmxb %v1, %v1, %v2
; CHECK-NEXT:    wfmxb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 112(%r3), 3
; CHECK-NEXT:    wfmxb %v0, %v0, %v1
; CHECK-NEXT:    vst %v0, 0(%r2), 3
; CHECK-NEXT:    br %r14
entry:
  %0 = load i128, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds i128, ptr %x, i64 4
  %1 = load i128, ptr %arrayidx1, align 8
  %mul = mul i128 %0, %1
  %arrayidx2 = getelementptr inbounds i128, ptr %x, i64 8
  %2 = load i128, ptr %arrayidx2, align 8
  %mul3 = mul i128 %mul, %2
  %arrayidx4 = getelementptr inbounds i128, ptr %x, i64 12
  %3 = load i128, ptr %arrayidx4, align 8
  %mul5 = mul i128 %mul3, %3
  %arrayidx6 = getelementptr inbounds i128, ptr %x, i64 16
  %4 = load i128, ptr %arrayidx6, align 8
  %mul7 = mul i128 %mul5, %4
  %arrayidx8 = getelementptr inbounds i128, ptr %x, i64 20
  %5 = load i128, ptr %arrayidx8, align 8
  %mul9 = mul i128 %mul7, %5
  %arrayidx10 = getelementptr inbounds i128, ptr %x, i64 24
  %6 = load i128, ptr %arrayidx10, align 8
  %mul11 = mul i128 %mul9, %6
  %arrayidx12 = getelementptr inbounds i128, ptr %x, i64 28
  %7 = load i128, ptr %arrayidx12, align 8
  %mul13 = mul i128 %mul11, %7
  ret i128 %mul13
}

define <2 x i64> @fun13_mul(ptr %x) {
; CHECK-LABEL: fun13_mul:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vl %v0, 0(%r2), 3
; CHECK-NEXT:    vl %v1, 16(%r2), 3
; CHECK-NEXT:    vfmdb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 32(%r2), 3
; CHECK-NEXT:    vl %v2, 48(%r2), 3
; CHECK-NEXT:    vfmdb %v1, %v1, %v2
; CHECK-NEXT:    vfmdb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 64(%r2), 3
; CHECK-NEXT:    vl %v2, 80(%r2), 3
; CHECK-NEXT:    vfmdb %v1, %v1, %v2
; CHECK-NEXT:    vl %v2, 96(%r2), 3
; CHECK-NEXT:    vfmdb %v1, %v1, %v2
; CHECK-NEXT:    vfmdb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 112(%r2), 3
; CHECK-NEXT:    vfmdb %v24, %v0, %v1
; CHECK-NEXT:    br %r14
entry:
  %0 = load <2 x i64>, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds <2 x i64>, ptr %x, i64 4
  %1 = load <2 x i64>, ptr %arrayidx1, align 8
  %mul = mul <2 x i64> %0, %1
  %arrayidx2 = getelementptr inbounds <2 x i64>, ptr %x, i64 8
  %2 = load <2 x i64>, ptr %arrayidx2, align 8
  %mul3 = mul <2 x i64> %mul, %2
  %arrayidx4 = getelementptr inbounds <2 x i64>, ptr %x, i64 12
  %3 = load <2 x i64>, ptr %arrayidx4, align 8
  %mul5 = mul <2 x i64> %mul3, %3
  %arrayidx6 = getelementptr inbounds <2 x i64>, ptr %x, i64 16
  %4 = load <2 x i64>, ptr %arrayidx6, align 8
  %mul7 = mul <2 x i64> %mul5, %4
  %arrayidx8 = getelementptr inbounds <2 x i64>, ptr %x, i64 20
  %5 = load <2 x i64>, ptr %arrayidx8, align 8
  %mul9 = mul <2 x i64> %mul7, %5
  %arrayidx10 = getelementptr inbounds <2 x i64>, ptr %x, i64 24
  %6 = load <2 x i64>, ptr %arrayidx10, align 8
  %mul11 = mul <2 x i64> %mul9, %6
  %arrayidx12 = getelementptr inbounds <2 x i64>, ptr %x, i64 28
  %7 = load <2 x i64>, ptr %arrayidx12, align 8
  %mul13 = mul <2 x i64> %mul11, %7
  ret <2 x i64> %mul13
}

define <4 x i32> @fun14_mul(ptr %x) {
; CHECK-LABEL: fun14_mul:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vl %v0, 0(%r2), 3
; CHECK-NEXT:    vl %v1, 16(%r2), 3
; CHECK-NEXT:    vfmsb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 32(%r2), 3
; CHECK-NEXT:    vl %v2, 48(%r2), 3
; CHECK-NEXT:    vfmsb %v1, %v1, %v2
; CHECK-NEXT:    vfmsb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 64(%r2), 3
; CHECK-NEXT:    vl %v2, 80(%r2), 3
; CHECK-NEXT:    vfmsb %v1, %v1, %v2
; CHECK-NEXT:    vl %v2, 96(%r2), 3
; CHECK-NEXT:    vfmsb %v1, %v1, %v2
; CHECK-NEXT:    vfmsb %v0, %v0, %v1
; CHECK-NEXT:    vl %v1, 112(%r2), 3
; CHECK-NEXT:    vfmsb %v24, %v0, %v1
; CHECK-NEXT:    br %r14
entry:
  %0 = load <4 x i32>, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds <4 x i32>, ptr %x, i64 4
  %1 = load <4 x i32>, ptr %arrayidx1, align 8
  %mul = mul <4 x i32> %0, %1
  %arrayidx2 = getelementptr inbounds <4 x i32>, ptr %x, i64 8
  %2 = load <4 x i32>, ptr %arrayidx2, align 8
  %mul3 = mul <4 x i32> %mul, %2
  %arrayidx4 = getelementptr inbounds <4 x i32>, ptr %x, i64 12
  %3 = load <4 x i32>, ptr %arrayidx4, align 8
  %mul5 = mul <4 x i32> %mul3, %3
  %arrayidx6 = getelementptr inbounds <4 x i32>, ptr %x, i64 16
  %4 = load <4 x i32>, ptr %arrayidx6, align 8
  %mul7 = mul <4 x i32> %mul5, %4
  %arrayidx8 = getelementptr inbounds <4 x i32>, ptr %x, i64 20
  %5 = load <4 x i32>, ptr %arrayidx8, align 8
  %mul9 = mul <4 x i32> %mul7, %5
  %arrayidx10 = getelementptr inbounds <4 x i32>, ptr %x, i64 24
  %6 = load <4 x i32>, ptr %arrayidx10, align 8
  %mul11 = mul <4 x i32> %mul9, %6
  %arrayidx12 = getelementptr inbounds <4 x i32>, ptr %x, i64 28
  %7 = load <4 x i32>, ptr %arrayidx12, align 8
  %mul13 = mul <4 x i32> %mul11, %7
  ret <4 x i32> %mul13
}

define i64 @fun15_divdelay(ptr %x) {
entry:
  %0 = load i64, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds i64, ptr %x, i64 2
  %1 = load i64, ptr %arrayidx1, align 8
  %div = div i64 %1, %0
  %arrayidx2 = getelementptr inbounds i64, ptr %x, i64 4
  %2 = load i64, ptr %arrayidx2, align 8
  %add1 = add i64 %div, %2
  %arrayidx3 = getelementptr inbounds i64, ptr %x, i64 6
  %3 = load i64, ptr %arrayidx3, align 8
  %add2 = add i64 %add1, %3
  ret i64 %add2
}

define i64 @fun16_divdelay(ptr %x) {
entry:
  %0 = load i64, ptr %x, align 8
  %arrayidx1 = getelementptr inbounds i64, ptr %x, i64 2
  %1 = load i64, ptr %arrayidx1, align 8
  %div = div i64 %1, %0
  %arrayidx2 = getelementptr inbounds i64, ptr %x, i64 4
  %2 = load i64, ptr %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds i64, ptr %x, i64 6
  %3 = load i64, ptr %arrayidx3, align 8
  %add1 = add i64 %2, %3
  %add2 = add i64 %add1, %div
  ret i64 %add2
}
