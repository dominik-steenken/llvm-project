//===-- SystemZMCCodeEmitter.cpp - Convert SystemZ code to machine code ---===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file implements the SystemZMCCodeEmitter class.
//
//===----------------------------------------------------------------------===//

#include "MCTargetDesc/SystemZMCFixups.h"
#include "MCTargetDesc/SystemZMCTargetDesc.h"
#include "llvm/ADT/SmallVector.h"
#include "llvm/MC/MCCodeEmitter.h"
#include "llvm/MC/MCContext.h"
#include "llvm/MC/MCExpr.h"
#include "llvm/MC/MCFixup.h"
#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCInstrInfo.h"
#include "llvm/MC/MCRegisterInfo.h"
#include "llvm/MC/MCSubtargetInfo.h"
#include "llvm/Support/ErrorHandling.h"
#include <cassert>
#include <cstdint>

using namespace llvm;

#define DEBUG_TYPE "mccodeemitter"

namespace {

class SystemZMCCodeEmitter : public MCCodeEmitter {
  const MCInstrInfo &MCII;
  MCContext &Ctx;

public:
  SystemZMCCodeEmitter(const MCInstrInfo &MCII, MCContext &Ctx)
      : MCII(MCII), Ctx(Ctx) {}

  ~SystemZMCCodeEmitter() override = default;

  // OVerride MCCodeEmitter.
  void encodeInstruction(const MCInst &MI, SmallVectorImpl<char> &CB,
                         SmallVectorImpl<MCFixup> &Fixups,
                         const MCSubtargetInfo &STI) const override;

  uint64_t fixSLLHH(const MCInst &MI, uint64_t EncodedValue,
                    const MCSubtargetInfo &STI) const;

  uint64_t fixSLLHL(const MCInst &MI, uint64_t EncodedValue,
                    const MCSubtargetInfo &STI) const;

  uint64_t fixSRLHH(const MCInst &MI, uint64_t EncodedValue,
                    const MCSubtargetInfo &STI) const;

  uint64_t fixSRLHL(const MCInst &MI, uint64_t EncodedValue,
                    const MCSubtargetInfo &STI) const;

  uint64_t fixSLLLH(const MCInst &MI, uint64_t EncodedValue,
                    const MCSubtargetInfo &STI) const;

  uint64_t fixSRLLH(const MCInst &MI, uint64_t EncodedValue,
                    const MCSubtargetInfo &STI) const;

private:
  // Automatically generated by TableGen.
  uint64_t getBinaryCodeForInstr(const MCInst &MI,
                                 SmallVectorImpl<MCFixup> &Fixups,
                                 const MCSubtargetInfo &STI) const;
  uint32_t getOperandBitOffset(const MCInst &MI, unsigned OpNum,
                               const MCSubtargetInfo &STI) const;

  // Called by the TableGen code to get the binary encoding of operand
  // MO in MI.  Fixups is the list of fixups against MI.
  uint64_t getMachineOpValue(const MCInst &MI, const MCOperand &MO,
                             SmallVectorImpl<MCFixup> &Fixups,
                             const MCSubtargetInfo &STI) const;

  // Return the encoded immediate value for the OpNum operand. If it is a
  // symbol, add a fixup for it and return 0.
  template <SystemZ::FixupKind Kind>
  uint64_t getImmOpValue(const MCInst &MI, unsigned OpNum,
                         SmallVectorImpl<MCFixup> &Fixups,
                         const MCSubtargetInfo &STI) const;

  // Called by the TableGen code to get the binary encoding of a length value.
  // Length values are encoded by subtracting 1 from the actual value.
  template <SystemZ::FixupKind Kind>
  uint64_t getLenEncoding(const MCInst &MI, unsigned OpNum,
                          SmallVectorImpl<MCFixup> &Fixups,
                          const MCSubtargetInfo &STI) const;

  // Operand OpNum of MI needs a PC-relative fixup of kind Kind at
  // Offset bytes from the start of MI.  Add the fixup to Fixups
  // and return the in-place addend, which since we're a RELA target
  // is always 0.  If AllowTLS is true and optional operand OpNum + 1
  // is present, also emit a TLS call fixup for it.
  uint64_t getPCRelEncoding(const MCInst &MI, unsigned OpNum,
                            SmallVectorImpl<MCFixup> &Fixups,
                            unsigned Kind, int64_t Offset,
                            bool AllowTLS) const;

  uint64_t getPC16DBLEncoding(const MCInst &MI, unsigned OpNum,
                              SmallVectorImpl<MCFixup> &Fixups,
                              const MCSubtargetInfo &STI) const {
    return getPCRelEncoding(MI, OpNum, Fixups,
                            SystemZ::FK_390_PC16DBL, 2, false);
  }
  uint64_t getPC32DBLEncoding(const MCInst &MI, unsigned OpNum,
                              SmallVectorImpl<MCFixup> &Fixups,
                              const MCSubtargetInfo &STI) const {
    return getPCRelEncoding(MI, OpNum, Fixups,
                            SystemZ::FK_390_PC32DBL, 2, false);
  }
  uint64_t getPC16DBLTLSEncoding(const MCInst &MI, unsigned OpNum,
                                 SmallVectorImpl<MCFixup> &Fixups,
                                 const MCSubtargetInfo &STI) const {
    return getPCRelEncoding(MI, OpNum, Fixups,
                            SystemZ::FK_390_PC16DBL, 2, true);
  }
  uint64_t getPC32DBLTLSEncoding(const MCInst &MI, unsigned OpNum,
                                 SmallVectorImpl<MCFixup> &Fixups,
                                 const MCSubtargetInfo &STI) const {
    return getPCRelEncoding(MI, OpNum, Fixups,
                            SystemZ::FK_390_PC32DBL, 2, true);
  }
  uint64_t getPC12DBLBPPEncoding(const MCInst &MI, unsigned OpNum,
                                 SmallVectorImpl<MCFixup> &Fixups,
                                 const MCSubtargetInfo &STI) const {
    return getPCRelEncoding(MI, OpNum, Fixups,
                            SystemZ::FK_390_PC12DBL, 1, false);
  }
  uint64_t getPC16DBLBPPEncoding(const MCInst &MI, unsigned OpNum,
                                 SmallVectorImpl<MCFixup> &Fixups,
                                 const MCSubtargetInfo &STI) const {
    return getPCRelEncoding(MI, OpNum, Fixups,
                            SystemZ::FK_390_PC16DBL, 4, false);
  }
  uint64_t getPC24DBLBPPEncoding(const MCInst &MI, unsigned OpNum,
                                 SmallVectorImpl<MCFixup> &Fixups,
                                 const MCSubtargetInfo &STI) const {
    return getPCRelEncoding(MI, OpNum, Fixups,
                            SystemZ::FK_390_PC24DBL, 3, false);
  }
};

} // end anonymous namespace

void SystemZMCCodeEmitter::encodeInstruction(const MCInst &MI,
                                             SmallVectorImpl<char> &CB,
                                             SmallVectorImpl<MCFixup> &Fixups,
                                             const MCSubtargetInfo &STI) const {
  uint64_t Bits = getBinaryCodeForInstr(MI, Fixups, STI);
  unsigned Size = MCII.get(MI.getOpcode()).getSize();
  // Big-endian insertion of Size bytes.
  unsigned ShiftValue = (Size * 8) - 8;
  for (unsigned I = 0; I != Size; ++I) {
    CB.push_back(uint8_t(Bits >> ShiftValue));
    ShiftValue -= 8;
  }
}

uint64_t SystemZMCCodeEmitter::
getMachineOpValue(const MCInst &MI, const MCOperand &MO,
                  SmallVectorImpl<MCFixup> &Fixups,
                  const MCSubtargetInfo &STI) const {
  if (MO.isReg())
    return Ctx.getRegisterInfo()->getEncodingValue(MO.getReg());
  // SystemZAsmParser::parseAnyRegister() produces KindImm when registers are
  // specified as integers.
  if (MO.isImm())
    return static_cast<uint64_t>(MO.getImm());
  llvm_unreachable("Unexpected operand type!");
}

template <SystemZ::FixupKind Kind>
uint64_t SystemZMCCodeEmitter::getImmOpValue(const MCInst &MI, unsigned OpNum,
                                             SmallVectorImpl<MCFixup> &Fixups,
                                             const MCSubtargetInfo &STI) const {
  const MCOperand &MO = MI.getOperand(OpNum);
  if (MO.isImm())
    return static_cast<uint64_t>(MO.getImm());
  if (MO.isExpr()) {
    unsigned MIBitSize = MCII.get(MI.getOpcode()).getSize() * 8;
    uint32_t RawBitOffset = getOperandBitOffset(MI, OpNum, STI);
    unsigned OpBitSize =
        SystemZ::MCFixupKindInfos[Kind - FirstTargetFixupKind].TargetSize;
    uint32_t BitOffset = MIBitSize - RawBitOffset - OpBitSize;
    Fixups.push_back(MCFixup::create(BitOffset >> 3, MO.getExpr(),
                                     (MCFixupKind)Kind, MI.getLoc()));
    assert(Fixups.size() <= 2 && "More than two memory operands in MI?");
    return 0;
  }
  llvm_unreachable("Unexpected operand type!");
}

template <SystemZ::FixupKind Kind>
uint64_t
SystemZMCCodeEmitter::getLenEncoding(const MCInst &MI, unsigned OpNum,
                                     SmallVectorImpl<MCFixup> &Fixups,
                                     const MCSubtargetInfo &STI) const {
  return getImmOpValue<Kind>(MI, OpNum, Fixups, STI) - 1;
}

uint64_t
SystemZMCCodeEmitter::getPCRelEncoding(const MCInst &MI, unsigned OpNum,
                                       SmallVectorImpl<MCFixup> &Fixups,
                                       unsigned Kind, int64_t Offset,
                                       bool AllowTLS) const {
  SMLoc Loc = MI.getLoc();
  const MCOperand &MO = MI.getOperand(OpNum);
  const MCExpr *Expr;
  if (MO.isImm())
    Expr = MCConstantExpr::create(MO.getImm() + Offset, Ctx);
  else {
    Expr = MO.getExpr();
    if (Offset) {
      // The operand value is relative to the start of MI, but the fixup
      // is relative to the operand field itself, which is Offset bytes
      // into MI.  Add Offset to the relocation value to cancel out
      // this difference.
      const MCExpr *OffsetExpr = MCConstantExpr::create(Offset, Ctx);
      Expr = MCBinaryExpr::createAdd(Expr, OffsetExpr, Ctx);
    }
  }
  Fixups.push_back(MCFixup::create(Offset, Expr, (MCFixupKind)Kind, Loc));

  // Output the fixup for the TLS marker if present.
  if (AllowTLS && OpNum + 1 < MI.getNumOperands()) {
    const MCOperand &MOTLS = MI.getOperand(OpNum + 1);
    Fixups.push_back(MCFixup::create(
        0, MOTLS.getExpr(), (MCFixupKind)SystemZ::FK_390_TLS_CALL, Loc));
  }
  return 0;
}

// replace an 8-bit immediate in an instruction encoded in RIE-f format.
void replaceImmediate(uint64_t &EncodedValue, uint8_t Immediate,
                      uint8_t ShiftAmount) {
  EncodedValue &= 0xffffffffffff - ((uint64_t)0xff << ShiftAmount);
  EncodedValue |= (Immediate << ShiftAmount);
}

// Replace all three immediates in an instruction encoded in RIE-f format.
void replaceImmediates(uint64_t &EncodedValue, uint8_t I3, uint8_t I4,
                       uint8_t I5) {
  replaceImmediate(EncodedValue, I3, 24);
  replaceImmediate(EncodedValue, I4, 16);
  replaceImmediate(EncodedValue, I5, 8);
}

uint64_t SystemZMCCodeEmitter::fixSLLHH(const MCInst &MI, uint64_t EncodedValue,
                                        const MCSubtargetInfo &STI) const {
  uint8_t I3In = MI.getOperand(3).getImm();
  // SLLHH R1,R2,I3 => RISBHGZ R1,R2,0,31-I3,I3
  uint8_t I3 = 0;
  uint8_t I4 = 0x80 | (0x1f - I3In); // 0x80 to set the Z bit.
  uint8_t I5 = I3In;
  replaceImmediates(EncodedValue, I3, I4, I5);
  return EncodedValue;
}

uint64_t SystemZMCCodeEmitter::fixSLLHL(const MCInst &MI, uint64_t EncodedValue,
                                        const MCSubtargetInfo &STI) const {
  uint8_t I3In = MI.getOperand(3).getImm();
  // SLLHL R1,R2,I3 => RISBHGZ R1,R2,0,31-I3,32+I3
  uint8_t I3 = 0;
  uint8_t I4 = 0x80 | (0x1f - I3In); // 0x80 to set the Z bit.
  uint8_t I5 = 0x20 + I3In;
  replaceImmediates(EncodedValue, I3, I4, I5);
  return EncodedValue;
}

uint64_t SystemZMCCodeEmitter::fixSRLHH(const MCInst &MI, uint64_t EncodedValue,
                                        const MCSubtargetInfo &STI) const {
  uint8_t I3In = MI.getOperand(3).getImm();
  // SRLHH R1,R2,I3 => RISBHGZ R1,R2,I3,31,-I3
  uint8_t I3 = I3In;
  uint8_t I4 = 0x9f; // 0x9f instead of 0x1f to set the Z bit.
  uint8_t I5 = 0 - I3In;
  replaceImmediates(EncodedValue, I3, I4, I5);
  return EncodedValue;
}

uint64_t SystemZMCCodeEmitter::fixSRLHL(const MCInst &MI, uint64_t EncodedValue,
                                        const MCSubtargetInfo &STI) const {
  uint8_t I3In = MI.getOperand(3).getImm();
  // SRLHL R1,R2,I3 => RISBHGZ R1,R2,I3,31,32-I3
  uint8_t I3 = I3In;
  uint8_t I4 = 0x9f; // 0x9f instead of 0x1f to set the Z bit.
  uint8_t I5 = 0x20 - I3In;
  replaceImmediates(EncodedValue, I3, I4, I5);
  return EncodedValue;
}

uint64_t SystemZMCCodeEmitter::fixSLLLH(const MCInst &MI, uint64_t EncodedValue,
                                        const MCSubtargetInfo &STI) const {
  uint8_t I3In = MI.getOperand(3).getImm();
  // SLLLH R1,R2,I3 => RISBLGZ R1,R2,0,31-I3,32+I3
  uint8_t I3 = 0;
  uint8_t I4 = 0x80 | (0x1f - I3In); // 0x80 to set the Z bit.
  uint8_t I5 = 0x20 + I3In;
  replaceImmediates(EncodedValue, I3, I4, I5);
  return EncodedValue;
}

uint64_t SystemZMCCodeEmitter::fixSRLLH(const MCInst &MI, uint64_t EncodedValue,
                                        const MCSubtargetInfo &STI) const {
  uint8_t I3In = MI.getOperand(3).getImm();
  // SRLHL R1,R2,I3 => RISBHGZ R1,R2,I3,31,32-I3
  uint8_t I3 = I3In;
  uint8_t I4 = 0x9f; // 0x9f instead of 0x1f to set the Z bit.
  uint8_t I5 = 0x20 - I3In;
  replaceImmediates(EncodedValue, I3, I4, I5);
  return EncodedValue;
}

#define GET_OPERAND_BIT_OFFSET
#include "SystemZGenMCCodeEmitter.inc"

MCCodeEmitter *llvm::createSystemZMCCodeEmitter(const MCInstrInfo &MCII,
                                                MCContext &Ctx) {
  return new SystemZMCCodeEmitter(MCII, Ctx);
}
